// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: todo.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Proto.Todo {
  public static partial class TodoService
  {
    static readonly string __ServiceName = "Proto.Todo.TodoService";

    static readonly grpc::Marshaller<global::Proto.Todo.Empty> __Marshaller_Proto_Todo_Empty = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Proto.Todo.Empty.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Proto.Todo.GetTodoItemsResponse> __Marshaller_Proto_Todo_GetTodoItemsResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Proto.Todo.GetTodoItemsResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Proto.Todo.GetTodoItemRequest> __Marshaller_Proto_Todo_GetTodoItemRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Proto.Todo.GetTodoItemRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Proto.Todo.GetTodoItemResponse> __Marshaller_Proto_Todo_GetTodoItemResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Proto.Todo.GetTodoItemResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Proto.Todo.PostTodoItemRequest> __Marshaller_Proto_Todo_PostTodoItemRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Proto.Todo.PostTodoItemRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Proto.Todo.PostTodoItemResponse> __Marshaller_Proto_Todo_PostTodoItemResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Proto.Todo.PostTodoItemResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Proto.Todo.PutTodoItemRequest> __Marshaller_Proto_Todo_PutTodoItemRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Proto.Todo.PutTodoItemRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Proto.Todo.PutTodoItemResponse> __Marshaller_Proto_Todo_PutTodoItemResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Proto.Todo.PutTodoItemResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Proto.Todo.DeleteTodoItemRequest> __Marshaller_Proto_Todo_DeleteTodoItemRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Proto.Todo.DeleteTodoItemRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Proto.Todo.DeleteTodoItemResponse> __Marshaller_Proto_Todo_DeleteTodoItemResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Proto.Todo.DeleteTodoItemResponse.Parser.ParseFrom);

    static readonly grpc::Method<global::Proto.Todo.Empty, global::Proto.Todo.GetTodoItemsResponse> __Method_GetTodoItems = new grpc::Method<global::Proto.Todo.Empty, global::Proto.Todo.GetTodoItemsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetTodoItems",
        __Marshaller_Proto_Todo_Empty,
        __Marshaller_Proto_Todo_GetTodoItemsResponse);

    static readonly grpc::Method<global::Proto.Todo.GetTodoItemRequest, global::Proto.Todo.GetTodoItemResponse> __Method_GetTodoItem = new grpc::Method<global::Proto.Todo.GetTodoItemRequest, global::Proto.Todo.GetTodoItemResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetTodoItem",
        __Marshaller_Proto_Todo_GetTodoItemRequest,
        __Marshaller_Proto_Todo_GetTodoItemResponse);

    static readonly grpc::Method<global::Proto.Todo.PostTodoItemRequest, global::Proto.Todo.PostTodoItemResponse> __Method_PostTodoItem = new grpc::Method<global::Proto.Todo.PostTodoItemRequest, global::Proto.Todo.PostTodoItemResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PostTodoItem",
        __Marshaller_Proto_Todo_PostTodoItemRequest,
        __Marshaller_Proto_Todo_PostTodoItemResponse);

    static readonly grpc::Method<global::Proto.Todo.PutTodoItemRequest, global::Proto.Todo.PutTodoItemResponse> __Method_PutTodoItem = new grpc::Method<global::Proto.Todo.PutTodoItemRequest, global::Proto.Todo.PutTodoItemResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PutTodoItem",
        __Marshaller_Proto_Todo_PutTodoItemRequest,
        __Marshaller_Proto_Todo_PutTodoItemResponse);

    static readonly grpc::Method<global::Proto.Todo.DeleteTodoItemRequest, global::Proto.Todo.DeleteTodoItemResponse> __Method_DeleteTodoItem = new grpc::Method<global::Proto.Todo.DeleteTodoItemRequest, global::Proto.Todo.DeleteTodoItemResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteTodoItem",
        __Marshaller_Proto_Todo_DeleteTodoItemRequest,
        __Marshaller_Proto_Todo_DeleteTodoItemResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Proto.Todo.TodoReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of TodoService</summary>
    public abstract partial class TodoServiceBase
    {
      public virtual global::System.Threading.Tasks.Task<global::Proto.Todo.GetTodoItemsResponse> GetTodoItems(global::Proto.Todo.Empty request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Proto.Todo.GetTodoItemResponse> GetTodoItem(global::Proto.Todo.GetTodoItemRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Proto.Todo.PostTodoItemResponse> PostTodoItem(global::Proto.Todo.PostTodoItemRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Proto.Todo.PutTodoItemResponse> PutTodoItem(global::Proto.Todo.PutTodoItemRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Proto.Todo.DeleteTodoItemResponse> DeleteTodoItem(global::Proto.Todo.DeleteTodoItemRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for TodoService</summary>
    public partial class TodoServiceClient : grpc::ClientBase<TodoServiceClient>
    {
      /// <summary>Creates a new client for TodoService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public TodoServiceClient(grpc::Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for TodoService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public TodoServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected TodoServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected TodoServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::Proto.Todo.GetTodoItemsResponse GetTodoItems(global::Proto.Todo.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetTodoItems(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Proto.Todo.GetTodoItemsResponse GetTodoItems(global::Proto.Todo.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetTodoItems, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Proto.Todo.GetTodoItemsResponse> GetTodoItemsAsync(global::Proto.Todo.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetTodoItemsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Proto.Todo.GetTodoItemsResponse> GetTodoItemsAsync(global::Proto.Todo.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetTodoItems, null, options, request);
      }
      public virtual global::Proto.Todo.GetTodoItemResponse GetTodoItem(global::Proto.Todo.GetTodoItemRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetTodoItem(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Proto.Todo.GetTodoItemResponse GetTodoItem(global::Proto.Todo.GetTodoItemRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetTodoItem, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Proto.Todo.GetTodoItemResponse> GetTodoItemAsync(global::Proto.Todo.GetTodoItemRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetTodoItemAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Proto.Todo.GetTodoItemResponse> GetTodoItemAsync(global::Proto.Todo.GetTodoItemRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetTodoItem, null, options, request);
      }
      public virtual global::Proto.Todo.PostTodoItemResponse PostTodoItem(global::Proto.Todo.PostTodoItemRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostTodoItem(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Proto.Todo.PostTodoItemResponse PostTodoItem(global::Proto.Todo.PostTodoItemRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PostTodoItem, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Proto.Todo.PostTodoItemResponse> PostTodoItemAsync(global::Proto.Todo.PostTodoItemRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostTodoItemAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Proto.Todo.PostTodoItemResponse> PostTodoItemAsync(global::Proto.Todo.PostTodoItemRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PostTodoItem, null, options, request);
      }
      public virtual global::Proto.Todo.PutTodoItemResponse PutTodoItem(global::Proto.Todo.PutTodoItemRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PutTodoItem(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Proto.Todo.PutTodoItemResponse PutTodoItem(global::Proto.Todo.PutTodoItemRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PutTodoItem, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Proto.Todo.PutTodoItemResponse> PutTodoItemAsync(global::Proto.Todo.PutTodoItemRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PutTodoItemAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Proto.Todo.PutTodoItemResponse> PutTodoItemAsync(global::Proto.Todo.PutTodoItemRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PutTodoItem, null, options, request);
      }
      public virtual global::Proto.Todo.DeleteTodoItemResponse DeleteTodoItem(global::Proto.Todo.DeleteTodoItemRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteTodoItem(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Proto.Todo.DeleteTodoItemResponse DeleteTodoItem(global::Proto.Todo.DeleteTodoItemRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteTodoItem, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Proto.Todo.DeleteTodoItemResponse> DeleteTodoItemAsync(global::Proto.Todo.DeleteTodoItemRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteTodoItemAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Proto.Todo.DeleteTodoItemResponse> DeleteTodoItemAsync(global::Proto.Todo.DeleteTodoItemRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteTodoItem, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override TodoServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new TodoServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(TodoServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_GetTodoItems, serviceImpl.GetTodoItems)
          .AddMethod(__Method_GetTodoItem, serviceImpl.GetTodoItem)
          .AddMethod(__Method_PostTodoItem, serviceImpl.PostTodoItem)
          .AddMethod(__Method_PutTodoItem, serviceImpl.PutTodoItem)
          .AddMethod(__Method_DeleteTodoItem, serviceImpl.DeleteTodoItem).Build();
    }

    /// <summary>Register service method implementations with a service binder. Useful when customizing the service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, TodoServiceBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_GetTodoItems, serviceImpl.GetTodoItems);
      serviceBinder.AddMethod(__Method_GetTodoItem, serviceImpl.GetTodoItem);
      serviceBinder.AddMethod(__Method_PostTodoItem, serviceImpl.PostTodoItem);
      serviceBinder.AddMethod(__Method_PutTodoItem, serviceImpl.PutTodoItem);
      serviceBinder.AddMethod(__Method_DeleteTodoItem, serviceImpl.DeleteTodoItem);
    }

  }
}
#endregion
